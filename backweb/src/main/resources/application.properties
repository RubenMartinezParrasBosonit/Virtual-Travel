<!--Postgres-->=
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.show-sql=true
#spring.datasource.url=jdbc:postgresql://127.0.0.1:5432/postgres
spring.datasource.url=jdbc:postgresql://localhost:5434/test
spring.datasource.username=ruben
spring.datasource.password=ruben

spring.datasource.initialization-mode=always
spring.datasource.initialize=true
spring.datasource.continue-on-error=true

<!--Kafka-->=
spring.kafka.bootstrap-servers=localhost:29092
spring.kafka.consumer.group-id=virtualtravel

spring.kafka.producer.key-serializer= org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=com.ruben.backweb.shared.kafka.serializer.ReservaOutputDtoSerializer

spring.kafka.consumer.key-deserializer= org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=com.ruben.backweb.shared.kafka.deserializer.ReservaOutputDtoDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*

message.topic.name=actualiza
message.group.name=virtualtravel

eureka.client.service-url.defaultZone=http://localhost:8761/eureka
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
eureka.client.registerWithEureka=true
eureka.client.fetchRegistry=true

server.port=${PORT:${SERVER_PORT:0}}